{"version":3,"file":"mappedJS.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d532233828894dc15f20","webpack:///plugin/src/js/Main.js","webpack:///external \"jQuery\"","webpack:///plugin/src/js/TileMap.js","webpack:///plugin/src/js/LatLng.js","webpack:///plugin/src/js/Point.js","webpack:///plugin/src/js/Bounds.js","webpack:///plugin/src/js/Rectangle.js","webpack:///plugin/src/js/View.js","webpack:///plugin/src/js/Tile.js","webpack:///plugin/src/js/StateHandler.js","webpack:///plugin/src/js/Publisher.js","webpack:///plugin/src/js/Helper.js","webpack:///plugin/src/js/Interact.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jQuery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jQuery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"de\"] = factory(require(\"jQuery\"));\n\telse\n\t\troot[\"de\"] = factory(root[\"jQuery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d532233828894dc15f20\n **/","import $ from 'jquery';\nimport {TileMap} from './TileMap.js';\nimport {Helper} from './Helper.js';\nimport {Publisher} from './Publisher.js';\nimport {Interact} from './Interact.js';\n\nexport class MappedJS {\n\n    /**\n     * Constructor\n     * @param  {string|Object} container=\".mjs\" - Container, either string, jQuery-object or dom-object\n     * @param  {string|Object} mapData={} - data of map tiles, can be json or path to file\n     * @param  {Object} mapSettings={} - settings for map, must be json\n     * @param  {Object} events={loaded: \"mjs-loaded\"} - List of events\n     * @param  {Boolean} jasmine=false - Option for jasmine tests\n     * @return {MappedJS} instance of MappedJS\n     */\n    constructor({container=\".mjs\", mapData={}, mapSettings={}, events={loaded:\"mjs-loaded\"}}) {\n        this.initializeSettings(container, events, mapSettings);\n\n        this.initializeData(mapData, function() {\n            this.initializeMap();\n            this.bindEvents();\n            this.loadingFinished();\n        }.bind(this));\n\n        return this;\n    }\n\n    /**\n     * initializes the settings and handles errors\n     * @param  {string|Object} container - Container, either string, jQuery-object or dom-object\n     * @param  {object} events - List of events\n     * @return {MappedJS} instance of MappedJS\n     */\n    initializeSettings(container, events, mapSettings) {\n        this.$container = (typeof container === \"string\") ? $(container) : ((typeof container === \"object\" && container instanceof jQuery) ? container : $(container));\n        if (!(this.$container instanceof jQuery)) {\n            throw new Error(\"Container \" + container + \" not found\");\n        }\n        this.$container.addClass(\"mappedJS\");\n\n        this.mapSettings = {\n            level: mapSettings.level || 0,\n            center: mapSettings.center || {\"lat\": 0, \"lng\": 0},\n            bounds: mapSettings.bounds || {\n                \"top\": 90,\n                \"left\": -180,\n                \"width\": 360,\n                \"height\": 180\n            }\n        };\n\n        this.events = events;\n\n        return this;\n    }\n\n    /**\n     * initializes the data, asynchronous\n     * @param  {Object} mapData - data of map tiles, can be json or path to file\n     * @param  {Function} cb - called, when data is received\n     * @return {MappedJS} instance of MappedJS\n     */\n    initializeData(mapData, cb) {\n        let _this = this;\n        if (typeof mapData === \"string\") {\n            Helper.requestJSON(mapData, function(data) {\n                _this.mapData = data;\n                cb();\n            });\n        } else {\n            this.mapData = (typeof mapData === \"object\") ? mapData : null;\n            cb();\n        }\n        return this;\n    }\n\n    /**\n     * initializes Map module\n     * @return {MappedJS} instance of MappedJS\n     */\n    initializeMap() {\n        this.tileMap = new TileMap({\n            container: this.$container,\n            tilesData: this.mapData,\n            settings: this.mapSettings\n        });\n        return this;\n    }\n\n    /**\n     * binds all events to handlers\n     * @return {MappedJS} instance of MappedJS\n     */\n    bindEvents() {\n        this.interact = new Interact({\n            container: this.$container,\n            callbacks: {\n                tap: function(data) {\n                    console.log(\"tap\", data);\n                }.bind(this),\n                pan: function(data) {\n                    let change = data.positions.last.substract(data.positions.current),\n                        absolutePosition = change.multiply(this.tileMap.view.viewport.width, this.tileMap.view.viewport.height);\n                    this.tileMap.view.centerPoint.add(absolutePosition);\n                    this.tileMap.redraw();\n                }.bind(this),\n                zoom: function(data) {\n                    console.log(\"zoom\", data);\n                }.bind(this)\n            }\n        });\n\n        $(window).on(\"resize orientationchange\", this.resizeHandler.bind(this));\n        \n        return this;\n    }\n\n    /**\n     * handles resizing of window\n     * @return {MappedJS} instance of MappedJS\n     */\n    resizeHandler() {\n        this.tileMap.resize();\n        return this;\n    }\n\n    /**\n     * called when loading and initialization is finished\n     * @return {MappedJS} instance of MappedJS\n     */\n    loadingFinished() {\n        this.$container.trigger(this.events.loaded);\n        return this;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Main.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jQuery\"\n ** module id = 1\n ** module chunks = 0\n **/","import $ from 'jquery';\nimport {LatLng} from './LatLng.js';\nimport {Bounds} from './Bounds.js';\nimport {Rectangle} from './Rectangle.js';\nimport {View} from './View.js';\n\nexport class TileMap {\n\n    /**\n     * Returns left offset of container\n     * @return {number} - left offset of container\n     */\n    get left() {\n        return this.$container.offset().left;\n    }\n\n    /**\n     * Returns top offset of container\n     * @return {number} - top offset of container\n     */\n    get top() {\n        return this.$container.offset().top;\n    }\n\n    /**\n     * Returns width of container\n     * @return {number} - width of container\n     */\n    get width() {\n        return this.$container.innerWidth();\n    }\n\n    /**\n     * Returns height of container\n     * @return {number} - height of container\n     */\n    get height() {\n        return this.$container.innerHeight();\n    }\n\n    /** Constructor\n     * @param  {Object} container - jQuery-object holding the container\n     * @param  {Object} tilesData={} - json object representing data of TileMap\n     * @param  {Object} settings={} - json object representing settings of TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    constructor({container, tilesData = {}, settings = {}}) {\n        if (!container) {\n            throw Error(\"You must define a container to initialize a TileMap\");\n        }\n\n        this.$container = container;\n        this.imgData = tilesData[TileMap.IMG_DATA_NAME];\n        this.settings = settings;\n\n        this.initialize(settings.bounds, settings.center, this.getCurrentLevelData().dimensions);\n\n        return this;\n    }\n\n    /**\n     * initializes the TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    initialize(bounds, center, mapDimensions) {\n        this.view = new View({\n            viewport: new Rectangle(this.left, this.top, this.width, this.height),\n            mapView: new Rectangle(0, 0, mapDimensions.width, mapDimensions.height),\n            bounds: new Bounds(new LatLng(bounds.northWest[0], bounds.northWest[1]), new LatLng(bounds.southEast[0], bounds.southEast[1])),\n            center: new LatLng(center.lat, center.lng),\n            data: this.getCurrentLevelData(),\n            drawCb: function(img, x, y, w, h) {\n                if (x % 1 !== 0 || y % 1 !== 0 || w % 1 !== 0 || h % 1 !== 0) {\n                    console.log(x,y,w,h);\n                }\n                this.canvasContext.drawImage(img, x, y, w, h);\n            }.bind(this)\n        });\n        this.initializeCanvas();\n        return this;\n    }\n\n    /**\n     * initializes the canvas, adds to DOM\n     * @return {TileMap} instance of TileMap\n     */\n    initializeCanvas() {\n        this.$canvas = $(\"<canvas class='mjs-canvas' />\");\n        this.canvas = this.$canvas[0];\n        this.$container.append(this.$canvas);\n        this.canvasContext = this.canvas.getContext(\"2d\");\n        this.resize();\n        return this;\n    }\n\n    /**\n     * gets data of current zoom level\n     * @return {Object} data for current level as json\n     */\n    getCurrentLevelData() {\n        return this.imgData[\"level-\" + this.settings.level];\n    }\n\n    /**\n     * clears canvas\n     * @return {TileMap} instance of TileMap\n     */\n    clearCanvas() {\n        this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        return this;\n    }\n\n    /**\n     * complete clear and draw of all visible tiles\n     * @return {TileMap} instance of TileMap\n     */\n    redraw() {\n        this.clearCanvas();\n        this.view.drawVisibleTiles();\n        return this;\n    }\n\n    /**\n     * Handles resizing of TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    resize() {\n        this.canvasContext.canvas.width = this.width;\n        this.canvasContext.canvas.height = this.height;\n        this.resizeView();\n        return this;\n    }\n\n    /**\n     * Handles resizing of view\n     * @return {TileMap} instance of TileMap\n     */\n    resizeView() {\n        this.view.viewport.size(this.left, this.top, this.width, this.height);\n        this.view.drawVisibleTiles();\n        return this;\n    }\n\n}\n\n/**\n * name of imagedata in data.json\n * @type {String}\n */\nTileMap.IMG_DATA_NAME = \"img_data\";\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/TileMap.js\n **/","import {Point} from './Point.js';\n\nexport class LatLng {\n\n    /**\n     * length of a latlng\n     * @return {number} length of a latlng\n     */\n    get length() {\n        return Math.sqrt(Math.pow(this.lat, 2) + Math.pow(this.lng, 2));\n    }\n\n    /**\n     * gets a clone of this latlng\n     * @return {LatLng} new instance equals this latlng\n     */\n    get clone() {\n        return LatLng.createFromLatLng(this);\n    }\n\n    /**\n     * Constructor\n     * @param  {number} lat = 0 - representation of latitude\n     * @param  {number} lng = 0 - representation of longitude\n     * @param  {Boolean} isDistance = false - if LatLng should be checked against bounds\n     * @return {LatLng} new instance of LatLng\n     */\n    constructor(lat = 0, lng = 0, isDistance = false) {\n        this.lat = lat % 90;\n        this.lat = (this.lat === -0) ? 0 : this.lat;\n        this.lng = lng % 180;\n        this.lng = (this.lng === -0) ? 0 : this.lng;\n        return this;\n    }\n\n    /**\n     * substract specified coord from this coordinate\n     * @param  {LatLng} coord - specified coordinate to substract from this coord\n     * @return {LatLng} the new calculated LatLng\n     */\n    substract(coord) {\n        this.lat -= coord.lat;\n        this.lng -= coord.lng;\n        return this;\n    }\n\n    /**\n     * add specified coord to this coordinate\n     * @param  {LatLng} coord - specified coordinate to add to this coord\n     * @return {LatLng} the new calculated LatLng\n     */\n    add(coord) {\n        this.lat += coord.lat;\n        this.lng += coord.lng;\n        return this;\n    }\n\n    /**\n     * converts Latlng to a Point\n     * @return {Point} Returns a Point representing LatLng in Pixels\n     */\n    toPoint(bounds, rect) {\n        let relativePosition = bounds.nw.clone.substract(this),\n            factorX = rect.width / bounds.width,\n            factorY = rect.height / bounds.height;\n        return new Point(Math.abs(relativePosition.lng * factorX), Math.abs(relativePosition.lat * factorY));\n    }\n\n    /**\n     * checks if specified coord equals this coord\n     * @param  {LatLng} coord - specified coord to check against\n     * @return {Boolean} Returns if specified coord equals this coord\n     */\n    equals(coord) {\n        return this.lat === coord.lat && this.lng === coord.lng;\n    }\n\n}\n\n/**\n * Creates a LatLng from specified LatLng\n * @param  {LatLng} LatLng - specified LatLng\n * @return {LatLng} the LatLng specified\n */\nLatLng.createFromLatLng = (latlng) => new LatLng(latlng.lat, latlng.lng);\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/LatLng.js\n **/","\nexport class Point {\n\n    /**\n     * length of a point\n     * @return {number} length of a point\n     */\n    get length() {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n\n    /**\n     * gets a clone of this point\n     * @return {Point} new instance equals this point\n     */\n    get clone() {\n        return Point.createFromPoint(this);\n    }\n\n    /**\n     * Constructor\n     * @param  {number} x = 0 - representation of x coordinate\n     * @param  {number} y = 0 - representation of y coordinate\n     * @return {Point} new instance of point\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /**\n     * substracts 2 points\n     * @param  {Point} point - the point to substract from this\n     * @return {Point} difference between this point and parameter point\n     */\n    substract(point) {\n        this.x -= point.x;\n        this.y -= point.y;\n        return this;\n    }\n\n    /**\n     * adds 2 points\n     * @param  {Point} point - the point to add to this\n     * @return {Point} addition of this point and parameter point\n     */\n    add(point) {\n        this.x += point.x;\n        this.y += point.y;\n        return this;\n    }\n\n    /**\n     * multiplicates a point with a given x and y\n     * @param  {number} x - factor to multiplicate x with\n     * @param  {number} y - factor to multiplicate y with\n     * @return {Point} Returns a new instance\n     */\n    multiply(x, y = x) {\n        this.x *= x;\n        this.y *= y;\n        return this;\n    }\n\n    /**\n     * divide a point with a given x and y\n     * @param  {number} x - factor to divide x with\n     * @param  {number} y - factor to divide y with\n     * @return {Point} Returns a new instance\n     */\n    divide(x, y = x) {\n        this.x /= x;\n        this.y /= y;\n        return this;\n    }\n\n    /**\n     * check if points are equal\n     * @param  {Point} point - the point to check against this\n     * @return {Boolean} is true, if x and y are the same\n     */\n    equals(point) {\n        return this.x === point.x && this.y === point.y;\n    }\n\n    /**\n     * Returns the distance from this Point to a specified Point\n     * @param  {Point} point - the specified point to be measured against this Point\n     * @return {Point} the distance between this Point and specified point\n     */\n    distance(point) {\n        return this.clone.substract(point).length;\n    }\n\n    /**\n     * translates a point by x and y\n     * @param  {number} x - value to move x\n     * @param  {number} y - value to move y\n     * @return {Point} instance of Point\n     */\n    translate(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n\n    /**\n     * positions a point by x and y\n     * @param  {number} x - value to position x\n     * @param  {number} y - value to position y\n     * @return {Point} instance of Point\n     */\n    position(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /**\n     * translates a Point to an array\n     * @return {Array} Returns Point as Array(x, y)\n     */\n    toArray() {\n        return [this.x, this.y];\n    }\n\n}\n\n/**\n * Creates a Point from specified point\n * @param  {Point} point - specified point\n * @return {Point} the point specified\n */\nPoint.createFromPoint = (point) => new Point(point.x, point.y);\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Point.js\n **/","import {LatLng} from './LatLng.js';\n\nexport class Bounds {\n\n    /**\n     * gets width of boundaries\n     * @return {number} width of boundaries\n     */\n    get width() {\n        return Math.abs(this.so.lng - this.nw.lng);\n    }\n\n    /**\n     * gets height of boundaries\n     * @return {number} height of boundaries\n     */\n    get height() {\n        return Math.abs(this.so.lat - this.nw.lat);\n    }\n\n    /**\n     * Constructor\n     * @param  {number} northWest = new LatLng() - representation of northWest boundary\n     * @param  {number} southEast = new LatLng() - representation of southEast boundary\n     * @return {Bounds} new instance of Bounds\n     */\n    constructor(northWest = new LatLng(), southEast = new LatLng()) {\n        if (northWest.lat < southEast.lat || northWest.lng > southEast.lng) {\n            throw new Error(`${northWest} needs to be top-right corner and ${southEast} bottom-left`);\n        }\n        this.nw = northWest;\n        this.so = southEast;\n        return this;\n    }\n    \n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Bounds.js\n **/","import {Point} from './Point.js';\n\nexport class Rectangle extends Point {\n\n    /**\n     * get center-position of rectangle\n     * @return {Point} center point\n     */\n    get center() {\n        return new Point(this.x + (this.width / 2), this.y + (this.height / 2));\n    }\n\n    /**\n     * get top-left-position of rectangle\n     * @return {Point} top-left point\n     */\n    get topLeft() {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * get top-right-position of rectangle\n     * @return {Point} top-right point\n     */\n    get topRight() {\n        return new Point(this.x + this.width, this.y);\n    }\n\n    /**\n     * get bottom-left-position of rectangle\n     * @return {Point} bottom-left point\n     */\n    get bottomLeft() {\n        return new Point(this.x, this.y + this.height);\n    }\n\n    /**\n     * get bottom-right-position of rectangle\n     * @return {Point} bottom-right point\n     */\n    get bottomRight() {\n        return new Point(this.x + this.width, this.y + this.height);\n    }\n\n    /**\n     * Returns right position of Rectangle\n     * @return {number} right position\n     */\n    get right() {\n        return this.x + this.width;\n    }\n\n    /**\n     * Returns left position of Rectangle\n     * @return {number} left position\n     */\n    get left() {\n        return this.x;\n    }\n\n    /**\n     * Returns top position of Rectangle\n     * @return {number} top position\n     */\n    get top() {\n        return this.y;\n    }\n\n    /**\n     * Returns bottom position of Rectangle\n     * @return {number} bottom position\n     */\n    get bottom() {\n        return this.y + this.height;\n    }\n\n    /**\n     * Constructor\n     * @param  {number} x=0 - x-position of specified rectangle\n     * @param  {number} y=0 - y-position of specified rectangle\n     * @param  {number} width=0 - width of specified rectangle\n     * @param  {number} height=0 - height of specified rectangle\n     * @return {Rectangle} new instance of Rectangle\n     */\n    constructor(x=0, y=0, width=0, height=0) {\n        super(x, y);\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n\n    /**\n     * Checks whether Rectangle intersects with specified Rectangle\n     * @param  {Rectangle} rect - the specified rectangle to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    intersects(rect) {\n        return !(rect.left > this.right || rect.right < this.left || rect.top > this.bottom || rect.bottom < this.top);\n    }\n\n    /**\n     * Checks whether Rectangle entirely contains the Rectangle or Point\n     * @param  {Rectangle|Point} rectOrPoint - the specified point or rectangle to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    contains(rectOrPoint) {\n        return (rectOrPoint instanceof Rectangle) ? this.containsRect(rectOrPoint) : (rectOrPoint instanceof Point) ? this.containsPoint(rectOrPoint) : false;\n    }\n\n    /**\n     * Checks whether Rectangle entirely contains the Point\n     * @param  {Point} point - the specified point to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    containsPoint(point) {\n        return (point instanceof Point) ? point.x >= this.left && point.y >= this.top && point.x <= this.right && point.y <= this.bottom : false;\n    }\n\n    /**\n     * Checks whether Rectangle entirely contains the Rectangle\n     * @param  {Rectangle} rect - the specified rectangle to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    containsRect(rect) {\n        return (rect instanceof Rectangle) ? rect.left >= this.left && rect.top >= this.top && rect.right <= this.right && rect.bottom <= this.bottom : false;\n    }\n\n    /**\n     * distort rectangle by factor\n     * @param  {number} factor - the specified factor of distortion\n     * @return {Rectangle} a new instance of Rectangle\n     */\n    getDistortedRect(factor) {\n        return new Rectangle(this.x, this.y, this.width, this.height).scaleX(factor);\n    }\n\n    /**\n     * scale x and width of rectangle\n     * @param  {number} x - factor to be applied to scale\n     * @return {Rectangle} scaled Rectangle\n     */\n    scaleX(x) {\n        this.x *= x;\n        this.width *= x;\n        return this;\n    }\n\n    /**\n     * scale y and height of rectangle\n     * @param  {number} y - factor to be applied to scale\n     * @return {Rectangle} new scaled Rectangle\n     */\n    scaleY(y) {\n        this.y *= y;\n        this.height *= y;\n        return this;\n    }\n\n    /**\n     * scale x and y for width and height of rectangle\n     * @param  {number} x - factor to be applied to scale\n     * @param  {number} y = x - factor to be applied to scale\n     * @return {Rectangle} new scaled Rectangle\n     */\n    scale(x, y = x) {\n        this.x *= x;\n        this.y *= y;\n        this.width *= x;\n        this.height *= y;\n        return this;\n    }\n\n    /**\n     * moves a rectangle by specified coords\n     * @param  {number} x - specified x to be added to x position\n     * @param  {number} y - specified y to be added to y position\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    translate(x, y) {\n        super.translate(x, y);\n        return this;\n    }\n\n    /**\n     * transforms a rectangle by specified coords\n     * @param  {number} x - specified x to be added to x position\n     * @param  {number} y - specified y to be added to y position\n     * @param  {number} width - specified width to be added to this width\n     * @param  {number} height - specified height to be added to this height\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    transform(x, y, width, height) {\n        this.translate(x, y);\n        this.width += width;\n        this.height += height;\n        return this;\n    }\n\n    /**\n     * changes the position a rectangle by specified coords\n     * @param  {number} x - the new x position\n     * @param  {number} y - he new y position\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    position(x, y) {\n        super.position(x, y);\n        return this;\n    }\n\n    /**\n     * changes the size of a rectangle by specified params\n     * @param  {number} x - the new x position\n     * @param  {number} y - the new y position\n     * @param  {number} width - the new width\n     * @param  {number} height - the new width\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    size(x, y, width, height) {\n        this.position(x, y);\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n\n    /**\n     * check if rectangles are equal\n     * @param  {Rectangle} rectangle - the specified rectangle to check against this\n     * @return {Boolean} is true, if x, y, width and height are the same\n     */\n    equals(rectangle) {\n        return (rectangle instanceof Rectangle) ? this.x === rectangle.x && this.y === rectangle.y && this.width === rectangle.width && this.height === rectangle.height : false;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Rectangle.js\n **/","import {LatLng} from './LatLng.js';\nimport {Bounds} from './Bounds.js';\nimport {Rectangle} from './Rectangle.js';\nimport {Tile} from './Tile.js';\nimport {Publisher} from './Publisher.js';\n\n/**\n * Singleton instance of Publisher\n */\nconst PUBLISHER = new Publisher();\n\nexport class View {\n\n    /**\n     * Returns current equalizationFactor\n     * @return {number} returns current equalizationFactor of latitude\n     */\n    get equalizationFactor() {\n        return (Math.cos(this.center.lat));\n    }\n\n    /**\n     * Returns the offset of the center\n     */\n    get offset() {\n        return this.viewport.center.substract(this.centerPoint);\n    }\n\n    /**\n     * Returns the offset of the map\n     * @return {number} calculated offset\n     */\n    get mapOffset() {\n        return this.offset.x + ((this.mapView.width - (this.mapView.width * this.equalizationFactor)) / 2);\n    }\n\n    /**\n     * get all visible tiles\n     * @return {array} all tiles that are currently visible\n     */\n    get visibleTiles() {\n        return this.tiles.filter(function(t, i, a) {\n            let newTile = t.getDistortedRect(this.equalizationFactor).translate(this.mapOffset, this.offset.y);\n            return this.viewport.intersects(newTile);\n        }, this);\n    }\n\n    /**\n     * Constructor\n     * @param  {Object} settings - the settings Object\n     * @param  {Rectangle} viewport = new Rectangle() - current representation of viewport\n     * @param  {Rectangle} mapView = new Rectangle() - current representation of map\n     * @param  {Bounds} bounds = new Bounds() - current bounds of map\n     * @param  {LatLng} center = new LatLng() - current center of map\n     * @param  {Object} data = {} - data of current map\n     * @return {View} Instance of View\n     */\n    constructor({viewport = new Rectangle(), mapView = new Rectangle(),bounds = new Bounds(), center = new LatLng(), data = {}, drawCb}) {\n        this.mapView = mapView;\n        this.viewport = viewport;\n        this.bounds = bounds;\n        this.center = center;\n        this.centerPoint = center.toPoint(this.bounds, this.mapView);\n        this.tiles = [];\n        this.data = data;\n        this.draw = drawCb;\n        this.bindEvents().initializeTiles();\n\n        return this;\n    }\n\n    /**\n     * handles on load of a tile\n     * @param  {Tile} tile a tile of the TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    onTilesLoaded(tile) {\n        this.drawTile(tile);\n        tile.state.next();\n        return this;\n    }\n\n    /**\n     * Handles draw of TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    drawVisibleTiles() {\n        for (var tile in this.visibleTiles) {\n            this.drawTile(this.visibleTiles[tile]);\n        }\n        return this;\n    }\n\n    /**\n     * draws tiles on canvas\n     * @param  {Tile} tile a tile of the TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    drawTile(tile) {\n        if (tile.state.current.value >= 2) {\n            if (this.draw && typeof this.draw === \"function\") {\n                let x = ((tile.x * this.equalizationFactor) + this.mapOffset) | 0,\n                    y = (tile.y + this.offset.y) | 0,\n                    w = ((tile.width * this.equalizationFactor) + 0.5) | 0,\n                    h = (tile.height + 0.5) | 0;\n                this.draw(tile.img, x, y, w, h);\n            } else {\n                console.error(\"Draw method is not defined or not a function\");\n            }\n        } else if (tile.state.current.value === 0) {\n            tile.initialize();\n        }\n        return this;\n    }\n\n    /**\n     * Handles all events for class\n     * @return {TileMap} instance of TileMap\n     */\n    bindEvents() {\n        PUBLISHER.subscribe(\"tile-loaded\", this.onTilesLoaded.bind(this));\n        return this;\n    }\n\n    /**\n     * initializes tiles\n     * @return {TileMap} instance of TileMap\n     */\n    initializeTiles() {\n        let currentLevel = this.data.tiles;\n        for (let tile in currentLevel) {\n            let currentTileData = currentLevel[tile];\n            let _tile = new Tile(currentTileData);\n            this.tiles.push(_tile);\n        }\n        return this;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/View.js\n **/","import $ from 'jquery';\nimport {StateHandler} from './StateHandler.js';\nimport {Rectangle} from './Rectangle.js';\nimport {Publisher} from './Publisher.js';\nimport {Helper} from './Helper.js';\n\n/**\n * Singleton instance of Publisher\n */\nconst PUBLISHER = new Publisher();\n\n/**\n * States of a tile\n * @type {Array}\n */\nconst STATES = [\n    {value: 0, description: 'Starting'},\n    {value: 1, description: 'Initialized'},\n    {value: 2, description: 'Loaded'},\n    {value: 3, description: 'Drawn'}\n];\n\n/**\n * Name of event fired, when tile is loaded\n * @type {String}\n */\nconst EVENT_TILE_LOADED = \"tile-loaded\";\n\n/**\n * Name of event fired, when tile is not found on loading\n * @type {String}\n */\nconst EVENT_TILE_FAILED = \"tile-failed\";\n\nexport class Tile extends Rectangle {\n\n    /**\n     * Return the Publisher\n     */\n    get Publisher() {\n        return PUBLISHER;\n    }\n\n    /**\n     * Constructor\n     * @param  {string} path=null - path to image\n     * @param  {number} x=0 - position x of tile\n     * @param  {number} y=0 - position y of tile\n     * @param  {number} w=0 - tile width\n     * @param  {number} h=0 - tile height\n     * @return {Tile} instance of Tile\n     */\n    constructor({path, x = 0, y = 0, w = 0, h = 0} = {}) {\n        super(x, y, w, h);\n        this.state = new StateHandler(STATES);\n        if (!path || typeof path !== \"string\" || path.length === 0) {\n            throw new TypeError(`Path ${path} needs to be of type string and should not be empty`);\n        }\n        this.path = path;\n        return this;\n    }\n\n    /**\n     * initializes tile and starts loading image\n     * @return {Tile} instance of Tile\n     */\n    initialize() {\n        this.state.next();\n        Helper.loadImage(this.path, function(img) {\n            this.img = img;\n            this.state.next();\n            PUBLISHER.publish(EVENT_TILE_LOADED, this);\n        }.bind(this));\n\n        return this;\n    }\n\n    /**\n     * check if tiles are equal\n     * @param  {Tile} tile - the specified tile to check against this\n     * @return {Boolean} is true, if x, y, width and height and path are the same\n     */\n    equals(tile) {\n        return (tile instanceof Tile) ? super.equals(tile) && this.path === tile.path : false;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Tile.js\n **/","\nexport class StateHandler {\n\n    /**\n     * get current state\n     * @return {Object} current state from STATES-array\n     */\n    get current() {\n        return this.states[this.i];\n    }\n\n    /**\n     * get number of states\n     * @return {number} number of states\n     */\n    get length() {\n        return this.states.length;\n    }\n\n    /**\n     * Constructor\n     * @param  {Array} states_array=[{value: 0, description: 'Default'}] - [description]\n     * @return {StateHandler} instance of StateHandler\n     */\n    constructor(states_array=[{value: 0, description: 'Default'}]) {\n        this.states = states_array;\n        this.i = 0;\n        return this;\n    }\n\n    /**\n     * get the next element\n     * @return {StateHandler} instance of StateHandler\n     */\n    next() {\n        if (this.hasNext()) {\n            this.i++;\n        }\n        return this;\n    }\n\n    /**\n     * get the previous element\n     * @return {StateHandler} instance of StateHandler\n     */\n    previous() {\n        if (this.hasPrevious()) {\n            this.i--;\n        }\n        return this;\n    }\n\n    /**\n     * change the state to specified state\n     * @param {number} state -\n     * @return {StateHandler} instance of StateHandler\n     */\n    changeTo(state) {\n        if (state >= 0 && state < this.length) {\n            this.i = state;\n        }\n        return this;\n    }\n\n    /**\n     * checks if there is a next element\n     * @return {Boolean} wheter there is a next state or not\n     */\n    hasNext() {\n        return this.i < this.length-1;\n    }\n\n    /**\n     * checks if there is a previous element\n     * @return {Boolean} wheter there is a previous state or not\n     */\n    hasPrevious() {\n        return this.i > 0;\n    }\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/StateHandler.js\n **/","/**\n * singleton instance\n * @type {Publisher}\n */\nlet instance = null;\n\nexport class Publisher {\n\n    /**\n     * Constructor\n     * @return {Publisher} instance of Publisher\n     */\n    constructor() {\n        if(!instance) {\n            this.subscribers = {\n            };\n            instance = this;\n        }\n        return instance;\n    }\n\n    /**\n     * subscribe to a topic\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Function} fn=function(){} - a function to callback\n     * @return {Publisher} instance of Publisher\n     */\n    subscribe(type = \"any\", fn = function() {}) {\n        if (!this.subscribers[type]) {\n            this.subscribers[type] = [];\n        }\n        this.subscribers[type].push(fn);\n        return this;\n    }\n\n    /**\n     * unsubscribe from a topic\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Function} fn=function(){} - a function to callback\n     * @return {Publisher} instance of Publisher\n     */\n    unsubscribe(type = \"any\", fn = function() {}) {\n        this.handle(Publisher.UNSUBSCRIBE, type, fn);\n        return this;\n    }\n\n    /**\n     * publish to a topic\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Function} arg=[] - list of parameters\n     * @return {Publisher} instance of Publisher\n     */\n    publish(type = \"any\", arg = []) {\n        this.handle(Publisher.PUBLISH, type, arg);\n        return this;\n    }\n\n    /**\n     * handle subscribe to a topic\n     * @param  {string} action - eventname\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Object} a function to callback or arguments\n     * @return {Publisher} instance of Publisher\n     */\n    handle(action, type, data) {\n        let subs = (this.subscribers[type]) ? this.subscribers[type]: [];\n        for (let i = 0; i < subs.length; i++) {\n            if (action === Publisher.PUBLISH) {\n                subs[i](data);\n            } else {\n                if (subs[i] === data) {\n                    subs.splice(i,1);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * destroys singleton instance\n     */\n    destroy() {\n        instance = null;\n    }\n\n}\n\n/**\n * Eventname for publishing\n * @type {String}\n */\nPublisher.PUBLISH = \"publish\";\n\n/**\n * Eventname for unsubscribing\n * @type {String}\n */\nPublisher.UNSUBSCRIBE = \"unsubscribe\";\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Publisher.js\n **/","import $ from 'jquery';\n\nexport var Helper = {\n\n    /**\n     * request json-data from given file and calls callback on success\n     * @param  {string} filename - path to file\n     * @param  {Function} callback - function called when data is loaded successfully\n     * @return {Helper} Helper\n     */\n    requestJSON: function(filename, callback) {\n        $.ajax({\n            type: \"GET\",\n            url: filename,\n            dataType: \"json\",\n            success: function(data, status, request) {\n                return callback(data);\n            },\n            error: function(response) {\n                if (response.status === 200) {\n                    throw new Error(\"The JSON submitted seems not valid\");\n                }\n                console.error(\"Error requesting file: \", response);\n            }\n        });\n        return this;\n    },\n    /**\n     * loads an image and calls callback on success\n     * @param  {Function} cb - callback-function on success\n     * @return {Helper} Helper\n     */\n    loadImage: function(path, cb) {\n        let img = new Image();\n        img.onload = function() {\n            if (cb && typeof cb === \"function\") {\n                cb(img);\n            }\n        };\n        img.src = path;\n        return this;\n    }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Helper.js\n **/","/*global PointerEvent,MSPointerEvent*/\n\nimport $ from 'jquery';\nimport {Point} from './Point.js';\n\nexport class Interact {\n\n    /**\n     * checks if mouse is possible\n     * @return {Boolean} if true, mouse is possible\n     */\n    get isMouse() {\n        return ('onmousedown' in window);\n    }\n\n    /**\n     * checks if touch is possible\n     * @return {Boolean} if true, touch is possible\n     */\n    get isTouch() {\n        return (('ontouchstart' in window) || (navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));\n    }\n\n    /**\n     * checks if IE is used\n     * @return {Boolean} if true, IE is used\n     */\n    get isIE() {\n        return ((navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));\n    }\n\n    /**\n     * gets cross-browser scroll-event\n     * @return {string} name of scroll event\n     */\n    get scrollEvent() {\n        return \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : document.onmousewheel !== undefined ? \"mousewheel\" : \"DOMMouseScroll\";\n    }\n\n    /**\n     * Constructor\n     * @param {Object} settings = {} - all the settings\n     * @param {string|Object} settings.container = \".interact-container\" - Container, either string, jQuery-object or dom-object\n     * @param {Object} settings.timeTreshold = {} - settings for the timing tresholds\n     * @param {number} settings.timeTreshold.tap = 200 - timing treshold for tap\n     * @param {number} settings.timeTreshold.hold = 500 - timing treshold for hold\n     * @param {number} settings.timeTreshold.swipe = 300 - timing treshold for swipe\n     * @param {number} settings.timeTreshold.flick = 30 - timing treshold for flick\n     * @param {Object} settings.distanceTreshold = {} - settings for the distance tresholds\n     * @param {number} settings.distanceTreshold.swipe = 200 - distance treshold for swipe\n     * @param {Boolean|string} settings.overwriteViewportSettings = false - on true prevents pinching, can be a custom string too\n     * @param {Boolean} settings.stopPropagation = true - on true stops the propagation of events\n     * @param {Boolean} settings.preventDefault = true - on true prevents the default actions of events\n     * @param {Boolean} settings.autoFireHold = false - if set to false hold-event is not fired\n     * @param {number} settings.pinchBalanceTime = 50 - prevents from firing too much pinching events\n     * @param {Object} settings.callbacks = {} - settings for the callback-functions\n     * @param {function} settings.callbacks.tap = null - callback-function for tap\n     * @param {function} settings.callbacks.tapHold = null - callback-function for tapHold\n     * @param {function} settings.callbacks.doubletap = null - callback-function for doubletap\n     * @param {function} settings.callbacks.hold = null - callback-function for hold\n     * @param {function} settings.callbacks.pan = null - callback-function for pan\n     * @param {function} settings.callbacks.swipe = null - callback-function for swipe\n     * @param {function} settings.callbacks.flick = null - callback-function for flick\n     * @param {function} settings.callbacks.zoom = null - callback-function for zoom\n     * @param {function} settings.callbacks.wheel = null - callback-function for wheel\n     * @param {function} settings.callbacks.pinch = null - callback-function for pinch\n     * @param {Object} settings.events = {} - settings all eventnames\n     * @param {Object} settings.events.start = {} - settings all start eventnames\n     * @param {Object} settings.events.start.touch = (\"MSPointerDown pointerdown\" || \"touchstart\") - settings start touch eventnames\n     * @param {Object} settings.events.start.mouse = (\"MSPointerDown pointerdown\" || \"mousedown\") - settings start mouse eventnames\n     * @param {Object} settings.events.move = {} - settings all move eventnames\n     * @param {Object} settings.events.move.touch = (\"MSPointerMove pointermove\" || \"touchmove\") - settings move touch eventnames\n     * @param {Object} settings.events.move.mouse = (\"MSPointerMove pointermove\" || \"mousemove\") - settings move mouse eventnames\n     * @param {Object} settings.events.end = {} - settings all end eventnames\n     * @param {Object} settings.events.end.touch = (\"MSPointerUp pointerup\" || \"touchend\") - settings end touch eventnames\n     * @param {Object} settings.events.end.mouse = (\"MSPointerUp pointerup\" || \"mouseup\") - settings end mouse eventnames\n     * @param {Object} settings.events.leave = {} - settings all leave eventnames\n     * @param {Object} settings.events.leave.touch = (\"MSPointerLeave pointerleave\" || \"touchleave\") - settings leave touch eventnames\n     * @param {Object} settings.events.leave.mouse = (\"MSPointerLeave pointerleave\" || \"mouseleave\") - settings leave mouse eventnames\n     * @param {string} settings.events.scroll = (\"wheel\" || \"mousewhell\" || \"DOMMouseScroll\") - settings all scroll eventnames\n     * @return {Interact} new instance\n     */\n    constructor(settings = {}) {\n        this.settings = {\n            container: \".interact-container\",\n            timeTreshold: {\n                tap: 200,\n                hold: 500,\n                swipe: 300,\n                flick: 30\n            },\n            distanceTreshold: {\n                swipe: 200\n            },\n            overwriteViewportSettings: false,\n            stopPropagation: true,\n            preventDefault: true,\n            autoFireHold: false,\n            pinchBalanceTime: 50,\n            callbacks: {\n                tap: null,\n                tapHold: null,\n                doubletap: null,\n                hold: null,\n                pan: null,\n                swipe: null,\n                flick: null,\n                zoom: null,\n                wheel: null,\n                pinch: null\n            },\n            events: {\n                start: {\n                    touch: (this.isIE) ? \"MSPointerDown pointerdown\" : \"touchstart\",\n                    mouse: (this.isIE) ? \"MSPointerDown pointerdown\" : \"mousedown\"\n                },\n                move: {\n                    touch: (this.isIE) ? \"MSPointerMove pointermove\" : \"touchmove\",\n                    mouse: (this.isIE) ? \"MSPointerMove pointermove\" : \"mousemove\"\n                },\n                end: {\n                    touch: (this.isIE) ? \"MSPointerUp pointerup\" : \"touchend\",\n                    mouse: (this.isIE) ? \"MSPointerUp pointerup\" : \"mouseup\"\n                },\n                leave: {\n                    touch: (this.isIE) ? \"MSPointerLeave pointerleave\" : \"touchleave\",\n                    mouse: (this.isIE) ? \"MSPointerLeave pointerleave\" : \"mouseleave\"\n                },\n                scroll: this.scrollEvent\n            }\n        };\n\n        $.extend(true, this.settings, settings || {});\n\n        this.isDown = false;\n        this.hasMoved = false;\n        this.multitouch = false;\n        this.lastAction = null;\n        this.start = null;\n        this.move = null;\n        this.end = null;\n        this.time = null;\n        this.timeStart = null;\n        this.timeEnd = null;\n        this.timeout = null;\n        this.holdTimeout = null;\n        this.wasPinched = false;\n        this.pointerIDs = {};\n\n        if (this.settings.overwriteViewportSettings) {\n            this.handleViewport(this.settings.overwriteViewportSettings);\n        }\n\n        this.init(this.settings.container).bindEvents();\n\n    }\n\n    /**\n     * handles the overwrite of viewport meta\n     * @param  {Boolean|string} viewport - specified viewport option\n     * @return {Interact} Returns this instance\n     */\n    handleViewport(viewport) {\n        if (typeof viewport !== \"string\") {\n            viewport = \"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no\";\n        }\n        let metaViewInHead = $(\"meta[name=viewport]\").length,\n            $viewportMeta = (metaViewInHead !== 0) ? $(\"meta[name=viewport]\") : $(\"head\").append($(\"<meta name='viewport' />\"));\n        $viewportMeta.attr(\"content\", viewport);\n        return this;\n    }\n\n    /**\n     * initializes class settings and bindings\n     * @param  {Object|string} container - Container, either string, jQuery-object or dom-object\n     * @return {Interact} Returns this instance\n     */\n    init(container) {\n        this.$container = (typeof container === \"string\") ? $(container) : ((typeof container === \"object\" && container instanceof jQuery) ? container : $(container));\n        if (!(this.$container instanceof jQuery)) {\n            throw new Error(\"Container \" + container + \" not found\");\n        }\n        this.$container.css({\n            \"-ms-touch-action\": \"none\",\n            \"touch-action\": \"none\",\n            \"-ms-content-zooming\": \"none\"\n        });\n        this.container = this.$container[0];\n        return this;\n    }\n\n    /**\n     * binds all needed events\n     * @return {Interact} Returns this instance\n     */\n    bindEvents() {\n        if (this.isIE) {\n            this.bindIEEvents();\n        } else {\n            if (this.isTouch) {\n                this.bindTouchEvents();\n            }\n            if (this.isMouse) {\n                this.bindMouseEvents();\n            }\n        }\n        return this;\n    }\n\n    /**\n     * binds all needed events for IE\n     * @return {Interact} Returns this instance\n     */\n    bindIEEvents() {\n        this.$container.on(this.settings.events.scroll, this.scrollHandler.bind(this));\n        this.bindTouchEvents();\n        this.container.addEventListener(\"contextmenu\", function(e) {\n            e.preventDefault();\n        }, false);\n        return this;\n    }\n\n    /**\n     * binds all needed events for touch devices\n     * @return {Interact} Returns this instance\n     */\n    bindTouchEvents() {\n        this.$container\n            .on(this.settings.events.start.touch, this.startHandler.bind(this))\n            .on(this.settings.events.move.touch, this.moveHandler.bind(this))\n            .on(this.settings.events.end.touch, this.endHandler.bind(this))\n            .on(this.settings.events.leave.touch, this.endHandler.bind(this));\n        return this;\n    }\n\n    /**\n     * binds all needed events for mouse devices\n     * @return {Interact} Returns this instance\n     */\n    bindMouseEvents() {\n        this.$container.on(this.settings.events.scroll, this.scrollHandler.bind(this))\n            .on(this.settings.events.start.mouse, this.startHandler.bind(this))\n            .on(this.settings.events.move.mouse, this.moveHandler.bind(this))\n            .on(this.settings.events.end.mouse, this.endHandler.bind(this))\n            .on(this.settings.events.leave.mouse, this.endHandler.bind(this));\n        return this;\n    }\n\n    /**\n     * handles cross-browser and -device scroll\n     * @param  {Object} event - jQuery-Event-Object\n     * @return {Boolean} always returns false\n     */\n    scrollHandler(event) {\n        event = event || window.event;\n\n        if (this.settings.stopPropagation) {\n            event.stopPropagation();\n        }\n        if (this.settings.preventDefault) {\n            event.preventDefault();\n        }\n\n        let e = this.getEvent(event) || event.originalEvent,\n            directions = this.getScrollDirection(e),\n            position = this.getRelativePosition(e);\n\n        if (this.settings.callbacks.wheel) {\n            this.eventCallback(this.settings.callbacks.wheel, {\n                target: event.target,\n                directions: directions,\n                position: position\n            });\n        }\n\n        if (this.settings.callbacks.zoom && (directions.indexOf(\"up\") > -1 || directions.indexOf(\"down\") > -1)) {\n            this.eventCallback(this.settings.callbacks.zoom, {\n                target: event.target,\n                direction: (directions.indexOf(\"up\") > -1) ? \"in\" : (directions.indexOf(\"down\") > -1) ? \"out\" : \"none\",\n                position: position,\n                factor: (directions.indexOf(\"up\") > -1) ? 1 : (directions.indexOf(\"down\") > -1) ? -1 : 0\n            });\n        }\n\n        return false;\n    }\n\n    /**\n     * handles cross-browser and -device start-event\n     * @param  {Object} event - jQuery-Event-Object\n     * @return {Boolean} always returns false\n     */\n    startHandler(event) {\n\n        if (this.settings.stopPropagation) {\n            event.stopPropagation();\n        }\n        if (this.settings.preventDefault) {\n            event.preventDefault();\n        }\n\n        if (event.button && event.button !== 0) {\n            return false;\n        }\n\n        let e = this.getEvent(event);\n\n        this.target = event.target;\n        this.isDown = true;\n        this.timeStart = event.timeStamp;\n\n        if (this.timeout) {\n            this.timeout = clearTimeout(this.timeout);\n        }\n\n        // mouse is used\n        if (e instanceof MouseEvent) {\n            this.start = this.getRelativePosition(e);\n        } // if is pointerEvent\n        if (this.isIE && (e instanceof MSPointerEvent || e instanceof PointerEvent)) {\n            this.pointerIDs[e.pointerId] = e;\n            if (Object.keys(this.pointerIDs).length <= 1) {\n                this.start = this.getRelativePosition(e);\n                this.multitouch = false;\n            } else {\n                this.multitouch = true;\n                let pointerPos = [];\n                for (let pointer in this.pointerIDs) {\n                    if (this.pointerIDs.hasOwnProperty(pointer)) {\n                        pointerPos.push(this.pointerIDs[pointer]);\n                    }\n                }\n                let pointerPos1 = this.getRelativePosition(pointerPos[0]),\n                    pointerPos2 = this.getRelativePosition(pointerPos[1]);\n\n                this.current.distance = pointerPos1.distance(pointerPos2);\n                this.start = pointerPos1.add(pointerPos2).divide(2, 2);\n            }\n        } // touch is used\n        else {\n            // singletouch startet\n            if (e.length <= 1) {\n                this.start = this.getRelativePosition(e[0]);\n            } // multitouch started\n            else if (e.length === 2) {\n                this.multitouch = true;\n                let pos1 = this.getRelativePosition(e[0]),\n                    pos2 = this.getRelativePosition(e[1]);\n                this.current.distance = pos1.distance(pos2);\n                this.start = pos1.add(pos2).divide(2, 2);\n            }\n        }\n        switch (this.lastAction) {\n            case null:\n                this.lastAction = \"tap\";\n                if (this.settings.autoFireHold) {\n                    this.setTimeoutForEvent(this.settings.callbacks.hold, this.settings.autoFireHold, {\n                        target: this.target,\n                        positions: {\n                            start: this.start\n                        }\n                    }, true);\n                }\n                break;\n            case \"tap\":\n                this.lastAction = \"doubletap\";\n                if (this.settings.autoFireHold) {\n                    this.setTimeoutForEvent(this.settings.callbacks.tapHold, this.settings.autoFireHold, {\n                        target: this.target,\n                        positions: {\n                            start: this.start\n                        }\n                    }, true);\n                }\n                break;\n            default:\n                break;\n        }\n\n        return false;\n    }\n\n    /**\n     * handles cross-browser and -device move-event\n     * @param  {Object} event - jQuery-Event-Object\n     * @return {Boolean} always returns false\n     */\n    moveHandler(event) {\n\n        if (this.settings.stopPropagation) {\n            event.stopPropagation();\n        }\n        if (this.settings.preventDefault) {\n            event.preventDefault();\n        }\n\n        // if touchstart event was not fired\n        if (!this.isDown || this.wasPinched) {\n            return false;\n        }\n\n        let e = this.getEvent(event),\n            currentPos,\n            currentDist,\n            lastPos = (this.move) ? this.move : this.start,\n            lastTime = (this.time) ? this.time : this.timeStart,\n            currentTime = event.timeStamp;\n\n        if (this.isIE && (this.getRelativePosition(e).equals(lastPos) || this.getRelativePosition(e).equals(this.start))) {\n            return false;\n        } else if (!this.isIE && this.isTouch && this.getRelativePosition(e[0]).equals(lastPos)) {\n            return false;\n        }\n\n        if (this.timeout) {\n            this.timeout = clearTimeout(this.timeout);\n        }\n        if (this.holdTimeout) {\n            this.holdTimeout = clearTimeout(this.holdTimeout);\n        }\n\n        this.hasMoved = true;\n        this.lastAction = \"move\";\n\n        this.time = event.timeStamp;\n\n        if (e instanceof MouseEvent) {\n            currentPos = this.getRelativePosition(e);\n            currentDist = lastPos.distance(currentPos);\n        } // if is pointerEvent\n        if (this.isIE && (e instanceof MSPointerEvent || e instanceof PointerEvent)) {\n            this.pointerIDs[e.pointerId] = e;\n            if (Object.keys(this.pointerIDs).length <= 1) {\n                currentPos = this.getRelativePosition(e);\n                currentDist = lastPos.distance(currentPos);\n                this.multitouch = false;\n            } else {\n                this.multitouch = true;\n                let pointerPos = [];\n                for (let pointer in this.pointerIDs) {\n                    if (this.pointerIDs.hasOwnProperty(pointer)) {\n                        pointerPos.push(this.pointerIDs[pointer]);\n                    }\n                }\n                let pointerPos1 = this.getRelativePosition(pointerPos[0]),\n                    pointerPos2 = this.getRelativePosition(pointerPos[1]);\n\n                currentDist = pointerPos1.distance(pointerPos2);\n                currentPos = pointerPos1.substract(pointerPos2).divide(2, 2);\n            }\n        } // touch is used\n        else {\n            // singletouch startet\n            if (e.length <= 1) {\n                currentPos = this.getRelativePosition(e[0]);\n                currentDist = lastPos.distance(currentPos);\n            } else if (e.length === 2) {\n                let pos1 = this.getRelativePosition(e[0]),\n                    pos2 = this.getRelativePosition(e[1]);\n                currentDist = pos1.distance(pos2);\n                currentPos = pos1.substract(pos2).divide(2, 2);\n            }\n        }\n\n        let timeDiff = (currentTime - lastTime);\n\n        if (this.multitouch) {\n            this.current.difference = currentDist - this.current.distance;\n            this.current.distance = currentDist;\n            this.oldMove = this.move;\n            this.move = currentPos;\n            if (this.settings.callbacks.pinch && this.current.difference !== 0) {\n                this.eventCallback(this.settings.callbacks.pinch, {\n                    target: event.target,\n                    positions: {\n                        start: this.start,\n                        current: this.move,\n                        last: this.oldMove\n                    },\n                    distance: {\n                        current: currentDist,\n                        differenceToLast: this.current.difference\n                    }\n                });\n            }\n            if (this.settings.callbacks.zoom && this.current.difference !== 0) {\n                this.eventCallback(this.settings.callbacks.zoom, {\n                    target: event.target,\n                    positions: {\n                        start: this.start,\n                        current: this.move,\n                        last: this.oldMove\n                    },\n                    direction: (this.current.difference < 0) ? \"out\" : (this.current.difference > 0) ? \"in\" : \"none\",\n                    factor: this.current.difference\n                });\n            }\n        } else {\n            this.speed = this.calculateSpeed(currentDist, timeDiff);\n\n            this.oldMove = this.move;\n            this.move = currentPos;\n\n            this.eventCallback(this.settings.callbacks.pan, {\n                target: this.target,\n                positions: {\n                    start: this.start,\n                    current: this.move,\n                    last: lastPos\n                },\n                timeElapsed: {\n                    sinceLast: timeDiff,\n                    sinceStart: currentTime - this.timeStart\n                },\n                distanceToLastPoint: currentDist,\n                speed: this.speed\n            });\n        }\n\n        return false;\n    }\n\n    /**\n     * handles cross-browser and -device end-event\n     * @param  {Object} event - jQuery-Event-Object\n     * @return {Boolean} always returns false\n     */\n    endHandler(event) {\n\n        if (this.settings.stopPropagation) {\n            event.stopPropagation();\n        }\n        if (this.settings.preventDefault) {\n            event.preventDefault();\n        }\n\n        let e = this.getEvent(event);\n\n        this.timeEnd = event.timeStamp;\n\n        let timeDiff = this.timeEnd - this.timeStart,\n            timeDiffToLastMove = this.timeEnd - this.time;\n\n        if (this.holdTimeout) {\n            this.holdTimeout = clearTimeout(this.holdTimeout);\n        }\n\n        if (e instanceof MouseEvent) {\n            this.end = this.getRelativePosition(e);\n        } // if is pointerEvent\n        if (this.isIE && (e instanceof MSPointerEvent || e instanceof PointerEvent)) {\n            this.end = this.getRelativePosition(e);\n            delete this.pointerIDs[e.pointerId];\n        } // touch is used\n        else {\n            // singletouch ended\n            if (e.length <= 1) {\n                this.end = this.getRelativePosition(e[0]);\n            }\n        }\n\n        // called only when not moved\n        if (!this.hasMoved && this.isDown && !this.multitouch) {\n            switch (this.lastAction) {\n                case \"tap\":\n                    if (timeDiff < this.settings.timeTreshold.hold) {\n                        this.setTimeoutForEvent(this.settings.callbacks.tap, this.settings.timeTreshold.tap, {\n                            target: this.target,\n                            positions: {\n                                start: this.start\n                            }\n                        });\n                    } else {\n                        this.eventCallback(this.settings.callbacks.hold, {\n                            target: this.target,\n                            positions: {\n                                start: this.start\n                            }\n                        });\n                    }\n                    break;\n                case \"doubletap\":\n                    if (timeDiff < this.settings.timeTreshold.hold) {\n                        this.setTimeoutForEvent(this.settings.callbacks.doubletap, this.settings.timeTreshold.tap, {\n                            target: this.target,\n                            positions: {\n                                start: this.start,\n                                end: this.end\n                            }\n                        });\n                    } else {\n                        this.eventCallback(this.settings.callbacks.tapHold, {\n                            target: this.target,\n                            positions: {\n                                start: this.start,\n                                end: this.end\n                            }\n                        });\n                    }\n                    break;\n                default:\n                    this.lastAction = null;\n            }\n        }\n        // if was moved\n        else if (this.hasMoved && this.isDown && !this.multitouch) {\n\n            if (this.settings.callbacks.swipe || this.settings.callbacks.flick) {\n\n                let direction = (this.settings.callbacks.swipe) ? this.end.substract(this.start) : this.end.substract(this.oldMove);\n\n                let vLDirection = direction.length,\n                    directionNormalized = direction.divide(vLDirection, vLDirection),\n                    distance = this.end.distance(this.start),\n                    speed = this.calculateSpeed(distance, timeDiff);\n\n                if (this.settings.callbacks.swipe && timeDiff <= this.settings.timeTreshold.swipe) {\n                    let originalStart = this.getAbsolutePosition(this.start),\n                        originalEnd = this.getAbsolutePosition(this.end);\n                    if (originalEnd.distance(originalStart) >= this.settings.distanceTreshold.swipe) {\n                        let directions = this.getSwipeDirections(directionNormalized);\n                        this.eventCallback(this.settings.callbacks.swipe, {\n                            positions: {\n                                start: this.start,\n                                end: this.end\n                            },\n                            speed: speed,\n                            directions: {\n                                named: directions,\n                                detailed: directionNormalized\n                            }\n                        });\n                    }\n                }\n\n                if (this.settings.callbacks.flick && (timeDiffToLastMove <= this.settings.timeTreshold.flick)) {\n                    this.eventCallback(this.settings.callbacks.flick, {\n                        speed: speed,\n                        direction: directionNormalized,\n                        positions: {\n                            start: this.start,\n                            end: this.end\n                        }\n                    });\n                }\n            }\n\n            switch (this.lastAction) {\n                default: this.lastAction = null;\n            }\n        }\n\n        if (this.multitouch) {\n            this.wasPinched = true;\n            setTimeout((function() {\n                this.wasPinched = false;\n            }).bind(this), this.settings.pinchBalanceTime);\n        }\n\n        this.multitouch = false;\n        this.isDown = false;\n        this.hasMoved = false;\n\n        // if is pointerEvent\n        if (this.isIE && (e instanceof MSPointerEvent || e instanceof PointerEvent)) {\n            if (Object.keys(this.pointerIDs).length > 1) {\n                this.multitouch = true;\n            } else if (Object.keys(this.pointerIDs).length > 0) {\n                this.isDown = true;\n            }\n        } // touch is used\n        else {\n            if (e.length > 1) {\n                this.multitouch = true;\n            } else if (e.length > 0) {\n                this.isDown = true;\n            }\n            this.move = null;\n        }\n\n        return false;\n    }\n\n    /**\n     * calculates the speed with specified distance and time\n     * @param  {number} distance - the specified distance\n     * @param  {number} time - the specified time elapsed\n     * @return {number} the calculated speed\n     */\n    calculateSpeed(distance, time) {\n        return (distance / (time || 1)) * 100;\n    }\n\n    /**\n     * Returns an array of strings, representing the directions\n     * @param  {Point} direction - the specified direction in pixel\n     * @return {string[]} returns an array representing the directions as strings\n     */\n    getSwipeDirections(direction) {\n        return [(direction.x < 0) ? \"left\" : (direction.x > 0) ? \"right\" : \"none\", (direction.y < 0) ? \"up\" : (direction.y > 0) ? \"down\" : \"none\"];\n    }\n\n    /**\n     * Helper for setting a timeout for events\n     * @param {Function} callback - function to be called\n     * @param {number} timeout - time in milliseconds\n     * @param {Object[]} args - array of arguments\n     * @param {Boolean} holdTimeout - if true, a different variable will be used\n     * @return {Interact} Returns this instance\n     */\n    setTimeoutForEvent(callback, timeout, args, holdTimeout) {\n        if (holdTimeout) {\n            this.holdTimeout = setTimeout(this.eventCallback.bind(this, callback, args), timeout);\n        } else {\n            this.timeout = setTimeout(this.eventCallback.bind(this, callback, args), timeout);\n        }\n        return this;\n    }\n\n    /**\n     * Eventhandler for handling the callbacks\n     * @param  {Function} callback - function to be called\n     * @param  {object[]} args - arguments for the function\n     * @return {Interact} Returns this instance\n     */\n    eventCallback(callback, args) {\n        if (callback && typeof callback === \"function\") {\n            callback(args);\n        }\n        this.lastAction = null;\n        return this;\n    }\n\n    /**\n     * get the relative position of clientX and clientY\n     * @param  {Object} e - event object\n     * @return {Point} calculated relative position\n     */\n    getRelativePosition(e) {\n        let clientBounds = this.container.getBoundingClientRect(),\n            pos = new Point(e.clientX, e.clientY),\n            bounds = new Point(clientBounds.left, clientBounds.top);\n        return pos.substract(bounds).divide(clientBounds.width, clientBounds.height);\n    }\n\n    /**\n     * get the absolute position of clientX and clientY\n     * @param  {Object} e - event object\n     * @return {Point} calculated absolute position\n     */\n    getAbsolutePosition(point) {\n        let clientBounds = this.container.getBoundingClientRect();\n        return point.mult(clientBounds.width, clientBounds.height);\n    }\n\n    /**\n     * get scroll direction from event\n     * @param  {Object} event - event object\n     * @return {string[]} an array with scroll directions\n     */\n    getScrollDirection(event) {\n        let axis = parseInt(event.axis, 10),\n            direction = [];\n\n        // down\n        if (event.deltaY > 0 || (!event.deltaY && event.wheelDeltaY < 0) || ((axis === 2) && (event.detail > 0)) || (Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail))) < 0)) {\n            direction.push(\"down\");\n        }\n        // up\n        else if (event.deltaY < 0 || (!event.deltaY && event.wheelDeltaY > 0) || (axis === 2 && event.detail < 0) || (Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail))) > 0)) {\n            direction.push(\"up\");\n        }\n\n        // right\n        if (event.deltaX > 0 || (!event.deltaX && event.wheelDeltaX > 0) || (axis === 1 && event.detail > 0)) {\n            direction.push(\"right\");\n        }\n\n        // left\n        else if (event.deltaX < 0 || (!event.deltaX && event.wheelDeltaX < 0) || (axis === 1 && event.detail < 0)) {\n            direction.push(\"left\");\n        }\n\n        return direction;\n    }\n\n    /**\n     * Get event helper, applies jQuery-event-fix too\n     * @param  {Object} e - event object\n     * @return {Object} new fixed and optimized event\n     */\n    getEvent(e) {\n        jQuery.event.fix(e);\n        if (e.originalEvent.touches && e.originalEvent.touches.length === 0) {\n            return e.originalEvent.changedTouches || e.originalEvent;\n        }\n        return e.originalEvent.touches || e.originalEvent.changedTouches || e.originalEvent;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Interact.js\n **/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AATA;AACA;;;;;;;;;AAZA;;AA6BA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAUA;AACA;AACA;;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAPA;AASA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAVA;AAFA;AACA;AAiBA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;;;;AAhIA;;;;;;;ACNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMA;;;;;;;;;AAMA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAzCA;AACA;AAwCA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;;;;;;;AAzCA;;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAJA;AANA;AAaA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AA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A;AA6EA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAjBA;AA5BA;AACA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAvEA;AACA;;;;;;;;AA9EA;;AA6JA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;;;;;;AAOA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AANA;AAUA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AADA;AAGA;;;;;;;;;;AAOA;AACA;AAKA;;;;;;;;;;AAOA;AACA;AAKA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAQA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;;AApBA;AAyBA;AADA;AAxBA;AA4BA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAfA;;AAFA;;AAsBA;AACA;;AADA;AAIA;AACA;AACA;AACA;AACA;AALA;AAzBA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AADA;AAQA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AADA;AAQA;AAtBA;AAwBA;AAxBA;AACA;AA0BA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;;AANA;AAWA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AACA;AAGA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAvCA;AA4CA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAhBA;;AAFA;;AAuBA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AA1BA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAPA;AADA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AADA;AAnBA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAZA;AArCA;AACA;AAoDA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AApBA;AAwBA;AACA;;AAFA;;AAMA;AACA;AADA;AANA;AACA;;AAxBA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AADA;AAQA;AACA;AACA;AACA;AADA;AAFA;AARA;AAeA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AADA;AASA;AACA;AACA;AACA;AACA;AAFA;AAFA;AATA;AAiBA;AApCA;AAsCA;AAtCA;;;AADA;AACA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AANA;AAFA;AAHA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AADA;AA5BA;AACA;AAuCA;AACA;AAAA;AADA;AA1CA;AACA;AA8CA;AACA;AACA;AACA;AADA;AAFA;AACA;AAMA;AACA;AACA;AACA;;AAvIA;AA0IA;AACA;AADA;AAGA;AADA;;AAHA;AAQA;AACA;AADA;AAGA;AADA;AAGA;AAbA;AACA;AAeA;;;;;;;;;;;;AASA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;;;;AAWA;AACA;AACA;AADA;AAGA;AAHA;AAKA;;;;;;;;;;;;AASA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AACA;AACA;;AAHA;AAMA;;;AADA;AAKA;AADA;AACA;;AAVA;AAeA;;;;AADA;AAMA;AADA;AACA;AAGA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;;;;AAvxBA;;;;;;","sourceRoot":""}