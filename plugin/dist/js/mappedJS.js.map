{"version":3,"file":"mappedJS.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 72217f9ee7b5db26858a","webpack:///plugin/src/js/Main.js","webpack:///external \"jQuery\"","webpack:///plugin/src/js/TileMap.js","webpack:///plugin/src/js/LatLng.js","webpack:///plugin/src/js/Point.js","webpack:///plugin/src/js/Rectangle.js","webpack:///plugin/src/js/Bounds.js","webpack:///plugin/src/js/View.js","webpack:///plugin/src/js/Tile.js","webpack:///plugin/src/js/State.js","webpack:///plugin/src/js/Publisher.js","webpack:///plugin/src/js/Helper.js","webpack:///plugin/src/js/Interact.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jQuery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jQuery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"de\"] = factory(require(\"jQuery\"));\n\telse\n\t\troot[\"de\"] = factory(root[\"jQuery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 72217f9ee7b5db26858a\n **/","import $ from 'jquery';\nimport {TileMap} from './TileMap.js';\nimport {Helper} from './Helper.js';\nimport {Publisher} from './Publisher.js';\nimport {Interact} from './Interact.js';\n\nexport class MappedJS {\n\n    /**\n     * Constructor\n     * @param  {string|Object} container=\".mjs\" - Container, either string, jQuery-object or dom-object\n     * @param  {string|Object} mapData={} - data of map tiles, can be json or path to file\n     * @param  {Object} mapSettings={} - settings for map, must be json\n     * @param  {Object} events={loaded: \"mjs-loaded\"} - List of events\n     * @param  {Boolean} jasmine=false - Option for jasmine tests\n     * @return {MappedJS} instance of MappedJS\n     */\n    constructor({container=\".mjs\", mapData={}, mapSettings={}, events={loaded:\"mjs-loaded\"}}) {\n        this.initializeSettings(container, events, mapSettings);\n\n        this.initializeData(mapData, function() {\n            this.initializeMap();\n            this.bindEvents();\n            this.loadingFinished();\n        }.bind(this));\n\n        return this;\n    }\n\n    /**\n     * initializes the settings and handles errors\n     * @param  {string|Object} container - Container, either string, jQuery-object or dom-object\n     * @param  {object} events - List of events\n     * @return {MappedJS} instance of MappedJS\n     */\n    initializeSettings(container, events, mapSettings) {\n        this.$container = (typeof container === \"string\") ? $(container) : ((typeof container === \"object\" && container instanceof jQuery) ? container : $(container));\n        if (!(this.$container instanceof jQuery)) {\n            throw new Error(\"Container \" + container + \" not found\");\n        }\n        this.$container.addClass(\"mappedJS\");\n\n        this.mapSettings = {\n            level: mapSettings.level || 0,\n            center: mapSettings.center || {\"lat\": 0, \"lng\": 0},\n            bounds: mapSettings.bounds || {\n                \"top\": 90,\n                \"left\": -180,\n                \"width\": 360,\n                \"height\": 180\n            }\n        };\n\n        this.events = events;\n\n        return this;\n    }\n\n    /**\n     * initializes the data, asynchronous\n     * @param  {Object} mapData - data of map tiles, can be json or path to file\n     * @param  {Function} cb - called, when data is received\n     * @return {MappedJS} instance of MappedJS\n     */\n    initializeData(mapData, cb) {\n        let _this = this;\n        if (typeof mapData === \"string\") {\n            Helper.requestJSON(mapData, function(data) {\n                _this.mapData = data;\n                cb();\n            });\n        } else {\n            this.mapData = (typeof mapData === \"object\") ? mapData : null;\n            cb();\n        }\n        return this;\n    }\n\n    /**\n     * initializes Map module\n     * @return {MappedJS} instance of MappedJS\n     */\n    initializeMap() {\n        this.$canvas = new TileMap({\n            container: this.$container,\n            tilesData: this.mapData,\n            settings: this.mapSettings\n        });\n        return this;\n    }\n\n    /**\n     * binds all events to handlers\n     * @return {MappedJS} instance of MappedJS\n     */\n    bindEvents() {\n        this.interact = new Interact({\n            \n        });\n        $(window).on(\"resize orientationchange\", this.resizeHandler.bind(this));\n        return this;\n    }\n\n    /**\n     * handles resizing of window\n     * @return {MappedJS} instance of MappedJS\n     */\n    resizeHandler() {\n        this.$canvas.resize();\n        return this;\n    }\n\n    /**\n     * called when loading and initialization is finished\n     * @return {MappedJS} instance of MappedJS\n     */\n    loadingFinished() {\n        this.$container.trigger(this.events.loaded);\n        return this;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Main.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jQuery\"\n ** module id = 1\n ** module chunks = 0\n **/","import $ from 'jquery';\nimport {LatLng} from './LatLng.js';\nimport {Bounds} from './Bounds.js';\nimport {Rectangle} from './Rectangle.js';\nimport {View} from './View.js';\n\nexport class TileMap {\n\n    /**\n     * Returns left offset of container\n     * @return {number} - left offset of container\n     */\n    get left() {\n        return this.$container.offset().left;\n    }\n\n    /**\n     * Returns top offset of container\n     * @return {number} - top offset of container\n     */\n    get top() {\n        return this.$container.offset().top;\n    }\n\n    /**\n     * Returns width of container\n     * @return {number} - width of container\n     */\n    get width() {\n        return this.$container.innerWidth();\n    }\n\n    /**\n     * Returns height of container\n     * @return {number} - height of container\n     */\n    get height() {\n        return this.$container.innerHeight();\n    }\n\n    /** Constructor\n     * @param  {Object} container - jQuery-object holding the container\n     * @param  {Object} tilesData={} - json object representing data of TileMap\n     * @param  {Object} settings={} - json object representing settings of TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    constructor({container, tilesData = {}, settings = {}}) {\n        if (!container) {\n            throw Error(\"You must define a container to initialize a TileMap\");\n        }\n\n        this.$container = container;\n        this.imgData = tilesData[TileMap.IMG_DATA_NAME];\n        this.settings = settings;\n\n        this.initialize(settings.bounds, settings.center, this.getCurrentLevelData().dimensions);\n\n        return this;\n    }\n\n    /**\n     * initializes the TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    initialize(bounds, center, mapDimensions) {\n        this.view = new View({\n            viewport: new Rectangle(this.left, this.top, this.width, this.height),\n            mapView: new Rectangle(0, 0, mapDimensions.width, mapDimensions.height),\n            bounds: new Bounds(new LatLng(bounds.northWest[0], bounds.northWest[1]), new LatLng(bounds.southEast[0], bounds.southEast[1])),\n            center: new LatLng(center.lat, center.lng),\n            data: this.getCurrentLevelData(),\n            drawCb: function(img, x, y, w, h) {\n                this.canvasContext.drawImage(img, x, y, w, h);\n            }.bind(this)\n        });\n        this.initializeCanvas();\n        return this;\n    }\n\n    /**\n     * initializes the canvas, adds to DOM\n     * @return {TileMap} instance of TileMap\n     */\n    initializeCanvas() {\n        this.$canvas = $(\"<canvas class='mjs-canvas' />\");\n        this.canvas = this.$canvas[0];\n        this.$container.append(this.$canvas);\n        this.canvasContext = this.canvas.getContext(\"2d\");\n        this.resize();\n        return this;\n    }\n\n    /**\n     * gets data of current zoom level\n     * @return {Object} data for current level as json\n     */\n    getCurrentLevelData() {\n        return this.imgData[\"level-\" + this.settings.level];\n    }\n\n    /**\n     * Handles resizing of TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    resize() {\n        this.canvasContext.canvas.width = this.width;\n        this.canvasContext.canvas.height = this.height;\n        this.resizeView();\n        return this;\n    }\n\n    /**\n     * Handles resizing of view\n     * @return {TileMap} instance of TileMap\n     */\n    resizeView() {\n        this.view.viewport.change(this.left, this.top, this.width, this.height);\n        this.view.drawVisibleTiles();\n        return this;\n    }\n\n}\n\n/**\n * name of imagedata in data.json\n * @type {String}\n */\nTileMap.IMG_DATA_NAME = \"img_data\";\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/TileMap.js\n **/","import {Point} from './Point.js';\nimport {Rectangle} from './Rectangle.js';\n\nexport class LatLng {\n\n    /**\n     * Constructor\n     * @param  {number} lat = 0 - representation of latitude\n     * @param  {number} lng = 0 - representation of longitude\n     * @param  {Boolean} isDistance = false - if LatLng should be checked against bounds\n     * @return {LatLng} new instance of LatLng\n     */\n    constructor(lat = 0, lng = 0, isDistance = false) {\n        if (!isDistance && (lat > 90 || lat < -90 || lng > 180 || lng < -180)) {\n            throw new Error(`latitude(${lat}) is greater/smaller than +/-90 or longitude(${lng}) is greater/smaller than +/-180`);\n        }\n        this.lat = lat;\n        this.lng = lng;\n        return this;\n    }\n\n    /**\n     * substract specified coord from this coordinate\n     * @param  {LatLng} coord - specified coordinate to substract from this coord\n     * @return {LatLng} the new calculated LatLng\n     */\n    sub(coord) {\n        return new LatLng(this.lat - coord.lat, this.lng - coord.lng);\n    }\n\n    /**\n     * substract specified coord from this coordinate\n     * @param  {LatLng} coord - specified coordinate to substract from this coord\n     * @return {LatLng} the new calculated LatLng\n     */\n    difference(coord) {\n        return new LatLng(this.lat - coord.lat, this.lng - coord.lng, true);\n    }\n\n    /**\n     * add specified coord to this coordinate\n     * @param  {LatLng} coord - specified coordinate to add to this coord\n     * @return {LatLng} the new calculated LatLng\n     */\n    add(coord) {\n        return new LatLng(this.lat + coord.lat, this.lng + coord.lng);\n    }\n\n    /**\n     * converts Latlng to a Point\n     * @return {Point} Returns a Point representing LatLng in Pixels\n     */\n    toPoint(bounds, rect) {\n        let relativePosition = bounds.nw.difference(this),\n            factorX = rect.width / bounds.width,\n            factorY = rect.height / bounds.height;\n        return new Point(Math.abs(relativePosition.lng * factorX), Math.abs(relativePosition.lat * factorY));\n    }\n\n    /**\n     * checks if specified coord equals this coord\n     * @param  {LatLng} coord - specified coord to check against\n     * @return {Boolean} Returns if specified coord equals this coord\n     */\n    equals(coord) {\n        return this.lat === coord.lat && this.lng === coord.lng;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/LatLng.js\n **/","\nexport class Point {\n\n    /**\n     * Constructor\n     * @param  {number} x = 0 - representation of x coordinate\n     * @param  {number} y = 0 - representation of y coordinate\n     * @return {Point} new instance of point\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /**\n     * substracts 2 points\n     * @param  {Point} point - the point to substract from this\n     * @return {Point} difference between this point and parameter point\n     */\n    sub(point) {\n        return new Point(this.x - point.x, this.y - point.y);\n    }\n\n    /**\n     * adds 2 points\n     * @param  {Point} point - the point to add to this\n     * @return {Point} addition of this point and parameter point\n     */\n    add(point) {\n        return new Point(this.x + point.x, this.y + point.y);\n    }\n\n    /**\n     * check if points are equal\n     * @param  {Point} point - the point to check against this\n     * @return {Boolean} is true, if x and y are the same\n     */\n    equals(point) {\n        return this.x === point.x && this.y === point.y;\n    }\n\n    /**\n     * Returns the difference from this Point to a specified Point\n     * @param  {Point} point - the specified point to be measured against this Point\n     * @return {Point} the difference between this Point and specified point\n     */\n    difference(point) {\n        return new Point(this.x - point.x, this.y - point.y);\n    }\n\n    /**\n     * Returns the distance from this Point to a specified Point\n     * @param  {Point} point - the specified point to be measured against this Point\n     * @return {Point} the distance between this Point and specified point\n     */\n    distance(point) {\n        let difference = this.difference(point);\n        return Math.sqrt(Math.pow(difference.x, 2) + Math.pow(difference.y, 2));\n    }\n\n    /**\n     * moves a point by x and y\n     * @param  {number} x - value to move x\n     * @param  {number} y - value to move y\n     * @return {Point} instance of Point\n     */\n    translate(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n\n}\n\n/**\n * Creates a Point from specified point\n * @param  {Point} point - specified point\n * @return {Point} the point specified\n */\nPoint.createFromPoint = (point) => new Point(point.x, point.y);\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Point.js\n **/","import {Point} from './Point.js';\n\nexport class Rectangle extends Point {\n\n    /**\n     * get center-position of rectangle\n     * @return {Point} center point\n     */\n    get center() {\n        return new Point(this.x + (this.width / 2), this.y + (this.height / 2));\n    }\n\n    /**\n     * get top-left-position of rectangle\n     * @return {Point} top-left point\n     */\n    get topLeft() {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * get top-right-position of rectangle\n     * @return {Point} top-right point\n     */\n    get topRight() {\n        return new Point(this.x + this.width, this.y);\n    }\n\n    /**\n     * get bottom-left-position of rectangle\n     * @return {Point} bottom-left point\n     */\n    get bottomLeft() {\n        return new Point(this.x, this.y + this.height);\n    }\n\n    /**\n     * get bottom-right-position of rectangle\n     * @return {Point} bottom-right point\n     */\n    get bottomRight() {\n        return new Point(this.x + this.width, this.y + this.height);\n    }\n\n    /**\n     * Returns right position of Rectangle\n     * @return {number} right position\n     */\n    get right() {\n        return this.x + this.width;\n    }\n\n    /**\n     * Returns left position of Rectangle\n     * @return {number} left position\n     */\n    get left() {\n        return this.x;\n    }\n\n    /**\n     * Returns top position of Rectangle\n     * @return {number} top position\n     */\n    get top() {\n        return this.y;\n    }\n\n    /**\n     * Returns bottom position of Rectangle\n     * @return {number} bottom position\n     */\n    get bottom() {\n        return this.y + this.height;\n    }\n\n    /**\n     * Constructor\n     * @param  {number} x=0 - x-position of specified rectangle\n     * @param  {number} y=0 - y-position of specified rectangle\n     * @param  {number} width=0 - width of specified rectangle\n     * @param  {number} height=0 - height of specified rectangle\n     * @return {Rectangle} new instance of Rectangle\n     */\n    constructor(x=0, y=0, width=0, height=0) {\n        super(x, y);\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n\n    /**\n     * Checks whether Rectangle intersects with specified Rectangle\n     * @param  {Rectangle} rect - the specified rectangle to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    intersects(rect) {\n        return !(rect.left > this.right || rect.right < this.left || rect.top > this.bottom || rect.bottom < this.top);\n    }\n\n    /**\n     * Checks whether Rectangle entirely contains the Rectangle or Point\n     * @param  {Rectangle|Point} rectOrPoint - the specified point or rectangle to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    contains(rectOrPoint) {\n        return (rectOrPoint instanceof Rectangle) ? this.containsRect(rectOrPoint) : (rectOrPoint instanceof Point) ? this.containsPoint(rectOrPoint) : false;\n    }\n\n    /**\n     * Checks whether Rectangle entirely contains the Point\n     * @param  {Point} point - the specified point to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    containsPoint(point) {\n        return (point instanceof Point) ? point.x >= this.left && point.y >= this.top && point.x <= this.right && point.y <= this.bottom : false;\n    }\n\n    /**\n     * Checks whether Rectangle entirely contains the Rectangle\n     * @param  {Rectangle} rect - the specified rectangle to check against\n     * @return {Boolean} true if containment is entirely\n     */\n    containsRect(rect) {\n        return (rect instanceof Rectangle) ? rect.left >= this.left && rect.top >= this.top && rect.right <= this.right && rect.bottom <= this.bottom : false;\n    }\n\n    /**\n     * distort rectangle by factor\n     * @param  {number} factor - the specified factor of distortion\n     * @return {Rectangle} a new instance of Rectangle\n     */\n    getDistortedRect(factor) {\n        return new Rectangle(this.x * factor, this.y, this.width * factor, this.height);\n    }\n\n    /**\n     * moves a rectangle by specified coords\n     * @param  {number} x - how far to move in x direction\n     * @param  {number} y - how far to move in y direction\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    translate(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n\n    /**\n     * transforms a rectangle by specified coords\n     * @param  {number} x - how far to transform in x direction\n     * @param  {number} y - how far to transform in y direction\n     * @param  {number} width - adds to the width\n     * @param  {number} height - adds to the width\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    transform(x, y, width, height) {\n        this.translate(x, y);\n        this.width += width;\n        this.height += height;\n        return this;\n    }\n\n    /**\n     * moves a rectangle by specified coords\n     * @param  {number} x - how far to move in x direction\n     * @param  {number} y - how far to move in y direction\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    move(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /**\n     * changes a rectangle by specified coords\n     * @param  {number} x - how far to change in x direction\n     * @param  {number} y - how far to change in y direction\n     * @param  {number} width - changes the width\n     * @param  {number} height - changes the width\n     * @return {Rectangle} Returns the altered rectangle\n     */\n    change(x, y, width, height) {\n        this.move(x, y);\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n\n    /**\n     * check if rectangles are equal\n     * @param  {Rectangle} rectangle - the specified rectangle to check against this\n     * @return {Boolean} is true, if x, y, width and height are the same\n     */\n    equals(rectangle) {\n        return (rectangle instanceof Rectangle) ? this.x === rectangle.x && this.y === rectangle.y && this.width === rectangle.width && this.height === rectangle.height : false;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Rectangle.js\n **/","import {LatLng} from './LatLng.js';\n\nexport class Bounds {\n\n    /**\n     * gets width of boundaries\n     * @return {number} width of boundaries\n     */\n    get width() {\n        return Math.abs(this.so.lng - this.nw.lng);\n    }\n\n    /**\n     * gets height of boundaries\n     * @return {number} height of boundaries\n     */\n    get height() {\n        return Math.abs(this.so.lat - this.nw.lat);\n    }\n\n    /**\n     * Constructor\n     * @param  {number} northWest = new LatLng() - representation of northWest boundary\n     * @param  {number} southEast = new LatLng() - representation of southEast boundary\n     * @return {Bounds} new instance of Bounds\n     */\n    constructor(northWest = new LatLng(), southEast = new LatLng()) {\n        if (northWest.lat < southEast.lat || northWest.lng > southEast.lng) {\n            throw new Error(`${northWest} needs to be top-right corner and ${southEast} bottom-left`);\n        }\n        this.nw = northWest;\n        this.so = southEast;\n        return this;\n    }\n    \n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Bounds.js\n **/","import {LatLng} from './LatLng.js';\nimport {Bounds} from './Bounds.js';\nimport {Rectangle} from './Rectangle.js';\nimport {Tile} from './Tile.js';\nimport {Publisher} from './Publisher.js';\n\n/**\n * Singleton instance of Publisher\n */\nconst PUBLISHER = new Publisher();\n\nexport class View {\n\n    /**\n     * Returns current distortion\n     * @return {number} returns current distortion of latitude\n     */\n    get distortion() {\n        return (Math.cos(this.center.lat));\n    }\n\n    /**\n     * Returns the offset of the center\n     */\n    get offset() {\n        let center = this.center.toPoint(this.bounds, this.mapView);\n        return this.viewport.center.sub(center);\n    }\n\n    /**\n     * Returns the offset of the map\n     * @param {number} distortion - the current latitude distortion\n     * @return {number} calculated offset\n     */\n    get mapOffset() {\n        return this.offset.x + ((this.mapView.width - (this.mapView.width * this.distortion)) / 2);\n    }\n\n    /**\n     * get all visible tiles\n     * @return {array} all tiles that are currently visible\n     */\n    get visibleTiles() {\n        return this.tiles.filter(function(t, i, a) {\n            let newTile = t.getDistortedRect(this.distortion).translate(this.mapOffset, this.offset.y);\n            return this.viewport.intersects(newTile);\n        }, this);\n    }\n\n    /**\n     * Constructor\n     * @param  {Object} settings - the settings Object\n     * @param  {Rectangle} viewport = new Rectangle() - current representation of viewport\n     * @param  {Rectangle} mapView = new Rectangle() - current representation of map\n     * @param  {Bounds} bounds = new Bounds() - current bounds of map\n     * @param  {LatLng} center = new LatLng() - current center of map\n     * @param  {Object} data = {} - data of current map\n     * @return {View} Instance of View\n     */\n    constructor({viewport = new Rectangle(), mapView = new Rectangle(),bounds = new Bounds(), center = new LatLng(), data = {}, drawCb}) {\n        this.mapView = mapView;\n        this.viewport = viewport;\n        this.bounds = bounds;\n        this.center = center;\n        this.tiles = [];\n        this.data = data;\n        this.draw = drawCb;\n        this.bindEvents().initializeTiles();\n\n        return this;\n    }\n\n    /**\n     * handles on load of a tile\n     * @param  {Tile} tile a tile of the TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    onTilesLoaded(tile) {\n        this.drawTile(tile);\n        tile.state.next();\n        return this;\n    }\n\n    /**\n     * Handles draw of TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    drawVisibleTiles() {\n        for (var tile in this.visibleTiles) {\n            this.drawTile(this.visibleTiles[tile]);\n        }\n        return this;\n    }\n\n    /**\n     * draws tiles on canvas\n     * @param  {Tile} tile a tile of the TileMap\n     * @return {TileMap} instance of TileMap\n     */\n    drawTile(tile) {\n        if (tile.state.current.value >= 2) {\n            if (this.draw && typeof this.draw === \"function\") {\n                this.draw(tile.img, (tile.x * this.distortion) +  this.mapOffset, tile.y + this.offset.y, tile.width * this.distortion, tile.height);\n            } else {\n                console.error(\"Draw method is not defined or not a function\");\n            }\n        } else if (tile.state.current.value === 0) {\n            tile.initialize();\n        }\n        return this;\n    }\n\n    /**\n     * Handles all events for class\n     * @return {TileMap} instance of TileMap\n     */\n    bindEvents() {\n        PUBLISHER.subscribe(\"tile-loaded\", this.onTilesLoaded.bind(this));\n        return this;\n    }\n\n    /**\n     * initializes tiles\n     * @return {TileMap} instance of TileMap\n     */\n    initializeTiles() {\n        let currentLevel = this.data.tiles;\n        for (let tile in currentLevel) {\n            let currentTileData = currentLevel[tile];\n            let _tile = new Tile(currentTileData);\n            this.tiles.push(_tile);\n        }\n        return this;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/View.js\n **/","import $ from 'jquery';\nimport {State} from './State.js';\nimport {Rectangle} from './Rectangle.js';\nimport {Publisher} from './Publisher.js';\nimport {Helper} from './Helper.js';\n\n/**\n * Singleton instance of Publisher\n */\nconst PUBLISHER = new Publisher();\n\n/**\n * States of a tile\n * @type {Array}\n */\nconst STATES = [\n    {value: 0, description: 'Starting'},\n    {value: 1, description: 'Initialized'},\n    {value: 2, description: 'Loaded'},\n    {value: 3, description: 'Drawn'}\n];\n\n/**\n * Name of event fired, when tile is loaded\n * @type {String}\n */\nconst EVENT_TILE_LOADED = \"tile-loaded\";\n\n/**\n * Name of event fired, when tile is not found on loading\n * @type {String}\n */\nconst EVENT_TILE_FAILED = \"tile-failed\";\n\nexport class Tile extends Rectangle {\n\n    /**\n     * Return the Publisher\n     */\n    get Publisher() {\n        return PUBLISHER;\n    }\n\n    /**\n     * Constructor\n     * @param  {string} path=null - path to image\n     * @param  {number} x=0 - position x of tile\n     * @param  {number} y=0 - position y of tile\n     * @param  {number} w=0 - tile width\n     * @param  {number} h=0 - tile height\n     * @return {Tile} instance of Tile\n     */\n    constructor({path, x = 0, y = 0, w = 0, h = 0} = {}) {\n        super(x, y, w, h);\n        this.state = new State(STATES);\n        if (!path || typeof path !== \"string\" || path.length === 0) {\n            throw new TypeError(`Path ${path} needs to be of type string and should not be empty`);\n        }\n        this.path = path;\n        return this;\n    }\n\n    /**\n     * initializes tile and starts loading image\n     * @return {Tile} instance of Tile\n     */\n    initialize() {\n        this.state.next();\n        Helper.loadImage(this.path, function(img) {\n            this.img = img;\n            this.state.next();\n            PUBLISHER.publish(EVENT_TILE_LOADED, this);\n        }.bind(this));\n\n        return this;\n    }\n\n    /**\n     * check if tiles are equal\n     * @param  {Tile} tile - the specified tile to check against this\n     * @return {Boolean} is true, if x, y, width and height and path are the same\n     */\n    equals(tile) {\n        return (tile instanceof Tile) ? super.equals(tile) && this.path === tile.path : false;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Tile.js\n **/","var STATES = new WeakMap();\n\nvar _makePrivate = o => STATES.set(o, {});\nvar _getPrivate = o => STATES.get(o);\n\nexport class State {\n\n    /**\n     * Constructor\n     * @param  {Array} states_array=[{value: 0, description: 'Default'}] - [description]\n     * @return {State} instance of State\n     */\n    constructor(states_array=[{value: 0, description: 'Default'}]) {\n        _makePrivate(this);\n        _getPrivate(this).STATES = states_array;\n        this.i = 0;\n        return this;\n    }\n\n    /**\n     * get current state\n     * @return {Object} a state from STATES-array\n     */\n    get current() {\n        return _getPrivate(this).STATES[this.i];\n    }\n\n    /**\n     * get the next element\n     * @return {State} instance of State\n     */\n    next() {\n        if (this.hasNext()) {\n            this.i++;\n        }\n        return this;\n    }\n\n    /**\n     * checks if there is a next element\n     * @return {Boolean} wheter there is a next state or not\n     */\n    hasNext() {\n        return this.i < _getPrivate(this).STATES.length-1;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/State.js\n **/","/**\n * singleton instance\n * @type {Publisher}\n */\nlet instance = null;\n\nexport class Publisher {\n\n    /**\n     * Constructor\n     * @return {Publisher} instance of Publisher\n     */\n    constructor() {\n        if(!instance) {\n            this.subscribers = {\n            };\n            instance = this;\n        }\n        return instance;\n    }\n\n    /**\n     * subscribe to a topic\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Function} fn=function(){} - a function to callback\n     * @return {Publisher} instance of Publisher\n     */\n    subscribe(type = \"any\", fn = function() {}) {\n        if (!this.subscribers[type]) {\n            this.subscribers[type] = [];\n        }\n        this.subscribers[type].push(fn);\n        return this;\n    }\n\n    /**\n     * unsubscribe from a topic\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Function} fn=function(){} - a function to callback\n     * @return {Publisher} instance of Publisher\n     */\n    unsubscribe(type = \"any\", fn = function() {}) {\n        this.handle(Publisher.UNSUBSCRIBE, type, fn);\n        return this;\n    }\n\n    /**\n     * publish to a topic\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Function} arg=[] - list of parameters\n     * @return {Publisher} instance of Publisher\n     */\n    publish(type = \"any\", arg = []) {\n        this.handle(Publisher.PUBLISH, type, arg);\n        return this;\n    }\n\n    /**\n     * handle subscribe to a topic\n     * @param  {string} action - eventname\n     * @param  {string} type=\"any\" - a topic\n     * @param  {Object} a function to callback or arguments\n     * @return {Publisher} instance of Publisher\n     */\n    handle(action, type, data) {\n        let subs = (this.subscribers[type]) ? this.subscribers[type]: [];\n        for (let i = 0; i < subs.length; i++) {\n            if (action === Publisher.PUBLISH) {\n                subs[i](data);\n            } else {\n                if (subs[i] === data) {\n                    subs.splice(i,1);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * destroys singleton instance\n     */\n    destroy() {\n        instance = null;\n    }\n\n}\n\n/**\n * Eventname for publishing\n * @type {String}\n */\nPublisher.PUBLISH = \"publish\";\n\n/**\n * Eventname for unsubscribing\n * @type {String}\n */\nPublisher.UNSUBSCRIBE = \"unsubscribe\";\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Publisher.js\n **/","import $ from 'jquery';\n\nexport var Helper = {\n\n    /**\n     * request json-data from given file and calls callback on success\n     * @param  {string} filename - path to file\n     * @param  {Function} callback - function called when data is loaded successfully\n     * @return {Helper} Helper\n     */\n    requestJSON: function(filename, callback) {\n        $.ajax({\n            type: \"GET\",\n            url: filename,\n            dataType: \"json\",\n            success: function(data, status, request) {\n                return callback(data);\n            },\n            error: function(response) {\n                if (response.status === 200) {\n                    throw new Error(\"The JSON submitted seems not valid\");\n                }\n                console.error(\"Error requesting file: \", response);\n            }\n        });\n        return this;\n    },\n    /**\n     * loads an image and calls callback on success\n     * @param  {Function} cb - callback-function on success\n     * @return {Helper} Helper\n     */\n    loadImage: function(path, cb) {\n        let img = new Image();\n        img.onload = function() {\n            if (cb && typeof cb === \"function\") {\n                cb(img);\n            }\n        };\n        img.src = path;\n        return this;\n    }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Helper.js\n **/","import $ from 'jquery';\nimport {Publisher} from './Publisher.js';\n\nexport class Interact {\n\n    get isIETouch() {\n        return ((navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));\n    }\n\n    get isTouch() {\n        return (('ontouchstart' in window) || (navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));\n    }\n\n    get isMouse() {\n        return ('onmousedown' in window);\n    }\n\n    get scrollEventName() {\n        return \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : document.onmousewheel !== undefined ? \"mousewheel\" : \"DOMMouseScroll\";\n    }\n\n    constructor(settings = {}) {\n        this.settings = {\n            container: \".gesturizer\",\n            timing: {\n                tap: 200,\n                hold: 500,\n                swipe: 300,\n                flick: 25,\n                pinch: 50\n            },\n            cb: {\n                tap: false,\n                tapHold: false,\n                doubletap: false,\n                hold: false,\n                pan: false,\n                swipe: false,\n                flick: false,\n                zoom: false,\n                wheel: false,\n                pinch: false\n            }\n        };\n        $.extend(true, this.settings, settings || {});\n        return this;\n    }\n\n    getEvent(e) {\n        $.event.fix(e);\n        if (e.originalEvent.touches && e.originalEvent.touches.length === 0) {\n            return e.originalEvent.changedTouches || e.originalEvent;\n        }\n        return e.originalEvent.touches || e.originalEvent.changedTouches || e.originalEvent;\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** plugin/src/js/Interact.js\n **/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AATA;AACA;;;;;;;;;AAZA;;AA6BA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAUA;AACA;AACA;;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAPA;AASA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;AAOA;AACA;AAGA;AACA;;;;;;;;;;AAOA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;;;;AAhHA;;;;;;;ACNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMA;;;;;;;;;AAMA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAzCA;AACA;AAwCA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;;;;;;;AAzCA;;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AAUA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;;;;AAhHA;;;;;;;;;AAyHA;;;;;;;;;;;;;;;;;;;;;AC5HA;AACA;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;AAVA;AACA;AASA;AACA;AADA;AAGA;AACA;AACA;AANA;AACA;;;;;;;;AAVA;;AAuBA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAQA;AACA;;;;AA9DA;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;AAOA;AAAA;AAAA;AACA;AATA;AACA;AAQA;AACA;AACA;AAHA;AACA;;;;;;;;AATA;;AAmBA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAQA;AACA;AACA;;;;;;;;;;;;AASA;AACA;AACA;AACA;;;;AArEA;;;;;;;;;;AA+EA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC9EA;;;;;;;;;;;AAMA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AACA;;;AADA;AACA;AAnFA;AACA;AADA;AACA;AAmFA;AACA;AACA;AAJA;AACA;;;;;;;;AAnFA;;AA8FA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAQA;AACA;;;;AAlMA;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;AAMA;AACA;;;;;;;;;;AAOA;AACA;;;;;;;;;;;;AASA;AAAA;AAAA;AACA;AAzBA;AACA;AAwBA;AACA;AADA;AAGA;AACA;AACA;AANA;AACA;AAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;AACA;AACA;;;;;;;;;AAMA;AACA;;;;;;;;;AAMA;AACA;AACA;;;;;;;;;;;AAQA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjDA;AACA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;;;;;;;;AAjDA;;AAkEA;AACA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AADA;AAGA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;AAHA;AADA;AAOA;AADA;AAGA;;;;;;;;;;AAOA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;AAzHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;AAKA;AACA;;;;;AAUA;AACA;;;;;AAKA;AACA;AACA;;;;;;;;;;AAKA;AACA;;;;;;;;;;;;;;;AAYA;;;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnBA;AACA;AADA;AACA;AAmBA;AACA;AACA;AADA;AAGA;AACA;AAPA;AACA;;;;;;;AAnBA;;AAgCA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;;;;;AAQA;AACA;;;;AAjDA;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;AAMA;AAAA;AACA;AARA;AACA;AAOA;AACA;AACA;AACA;AAJA;AACA;;;;;;;AARA;;;;;;;;AA0BA;AACA;AACA;AADA;AAGA;;;;;;;;;;AAOA;AACA;;;;AApBA;AACA;;;;AAnBA;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;;;;;;AAKA;AANA;AACA;AAMA;AACA;AAEA;AAHA;AAKA;AANA;AACA;;;;;;;;;AAPA;;AAqBA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;AASA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;AASA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAHA;AADA;AASA;;;;;;;;;AAMA;AACA;;;;AA5EA;;;;;;;;;AAqFA;AACA;;;;;AAKA;;;;;;;;;;;;;;;;;;;AC/FA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AAJA;AAPA;AAcA;AAfA;;;;;;AAsBA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AARA;AACA;AA/BA;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;;;AAEA;AACA;;;;AAGA;AACA;;;;AAGA;AACA;;;;AAGA;AACA;;;;AAGA;AAAA;AACA;AAnBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AATA;AAsBA;AACA;AAxBA;AACA;AAnBA;;AA6CA;AACA;AACA;AACA;AADA;AAGA;;;;AAlDA;;;;;;","sourceRoot":""}